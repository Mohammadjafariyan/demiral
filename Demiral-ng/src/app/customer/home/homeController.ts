/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v10.6.6324.28497 (NJsonSchema v8.33.6323.36213) (http://NSwag.org)
// </auto-generated>
//----------------------

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import {Observable} from 'rxjs/Observable';
import {Injectable, Inject, Optional} from '@angular/core';
import {Http, Headers, ResponseContentType, Response} from '@angular/http';

const API_BASE_URL = "http://localhost:52826";

@Injectable()
export class HomeClient {
  private http: Http;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ? baseUrl : "http://localhost:52826";
  }

  getCategories(): Observable<Category[] | null> {
    let url_ = this.baseUrl + "/api/Home";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = "";

    let options_ = {
      body: content_,
      method: "get",
      headers: new Headers({
        "Content-Type": "application/json; charset=UTF-8",
        "Accept": "application/json; charset=UTF-8"
      })
    };
    console.log('generated url', url_);

    return this.http.request(url_, options_).flatMap((response_) => {
      return this.processGetCategories(response_);
    }).catch((response_: any) => {
      if (response_ instanceof Response) {
        try {
          return this.processGetCategories(response_);
        } catch (e) {
          return <Observable<Category[]>><any>Observable.throw(e);
        }
      } else
        return <Observable<Category[]>><any>Observable.throw(response_);
    });
  }

  protected processGetCategories(response: Response): Observable<Category[] | null> {
    const status = response.status;

    if (status === 200) {
      const responseText = response.text();
      let result200: Category[] | null = null;
      let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
      if (resultData200 && resultData200.constructor === Array) {
        result200 = [];
        for (let item of resultData200)
          result200.push(Category.fromJS(item));
      }
      return Observable.of(result200);
    } else if (status !== 200 && status !== 204) {
      const responseText = response.text();
      return throwException("An unexpected server error occurred.", status, responseText);
    }
    return Observable.of<Category[] | null>(<any>null);
  }

  getCategory(id: number): Observable<Category | null> {
    let url_ = this.baseUrl + "/api/Home/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = "";

    let options_ = {
      body: content_,
      method: "get",
      headers: new Headers({
        "Content-Type": "application/json; charset=UTF-8",
        "Accept": "application/json; charset=UTF-8"
      })
    };

    return this.http.request(url_, options_).flatMap((response_) => {
      return this.processGetCategory(response_);
    }).catch((response_: any) => {
      if (response_ instanceof Response) {
        try {
          return this.processGetCategory(response_);
        } catch (e) {
          return <Observable<Category>><any>Observable.throw(e);
        }
      } else
        return <Observable<Category>><any>Observable.throw(response_);
    });
  }

  protected processGetCategory(response: Response): Observable<Category | null> {
    const status = response.status;

    if (status === 200) {
      const responseText = response.text();
      let result200: Category | null = null;
      let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
      result200 = resultData200 ? Category.fromJS(resultData200) : <any>null;
      return Observable.of(result200);
    } else if (status !== 200 && status !== 204) {
      const responseText = response.text();
      return throwException("An unexpected server error occurred.", status, responseText);
    }
    return Observable.of<Category | null>(<any>null);
  }
}

export class Category implements ICategory {
  id: number;
  name?: string | null;
  parentId?: number | null;
  row?: number | null;
  inMyMarkets?: boolean | null;
  icon?: string | null;
  imageUrl?: string | null;
  onHoverIcon?: string | null;
  isLeaf?: boolean | null;
  category1?: Category[] | null;
  category2?: Category | null;
  products?: Product[] | null;
  rFQs?: RFQ[] | null;
  specification?: Specification | null;
  isShowed;

  IsShowed() {
    return this.isShowed;
  }

  constructor(data?: ICategory) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.id = data["Id"] !== undefined ? data["Id"] : <any>null;
      this.name = data["Name"] !== undefined ? data["Name"] : <any>null;
      this.parentId = data["ParentId"] !== undefined ? data["ParentId"] : <any>null;
      this.row = data["Row"] !== undefined ? data["Row"] : <any>null;
      this.inMyMarkets = data["InMyMarkets"] !== undefined ? data["InMyMarkets"] : <any>null;
      this.icon = data["Icon"] !== undefined ? data["Icon"] : <any>null;
      this.imageUrl = data["ImageUrl"] !== undefined ? data["ImageUrl"] : <any>null;
      this.onHoverIcon = data["onHoverIcon"] !== undefined ? data["onHoverIcon"] : <any>null;
      this.isLeaf = data["IsLeaf"] !== undefined ? data["IsLeaf"] : <any>null;
      if (data["Category1"] && data["Category1"].constructor === Array) {
        this.category1 = [];
        for (let item of data["Category1"])
          this.category1.push(Category.fromJS(item));
      }
      this.category2 = data["Category2"] ? Category.fromJS(data["Category2"]) : <any>null;
      if (data["Products"] && data["Products"].constructor === Array) {
        this.products = [];
        for (let item of data["Products"])
          this.products.push(Product.fromJS(item));
      }
      if (data["RFQs"] && data["RFQs"].constructor === Array) {
        this.rFQs = [];
        for (let item of data["RFQs"])
          this.rFQs.push(RFQ.fromJS(item));
      }
      this.specification = data["Specification"] ? Specification.fromJS(data["Specification"]) : <any>null;
    }
  }

  static fromJS(data: any): Category {
    let result = new Category();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Id"] = this.id !== undefined ? this.id : <any>null;
    data["Name"] = this.name !== undefined ? this.name : <any>null;
    data["ParentId"] = this.parentId !== undefined ? this.parentId : <any>null;
    data["Row"] = this.row !== undefined ? this.row : <any>null;
    data["InMyMarkets"] = this.inMyMarkets !== undefined ? this.inMyMarkets : <any>null;
    data["Icon"] = this.icon !== undefined ? this.icon : <any>null;
    data["ImageUrl"] = this.imageUrl !== undefined ? this.imageUrl : <any>null;
    data["onHoverIcon"] = this.onHoverIcon !== undefined ? this.onHoverIcon : <any>null;
    data["IsLeaf"] = this.isLeaf !== undefined ? this.isLeaf : <any>null;
    if (this.category1 && this.category1.constructor === Array) {
      data["Category1"] = [];
      for (let item of this.category1)
        data["Category1"].push(item.toJSON());
    }
    data["Category2"] = this.category2 ? this.category2.toJSON() : <any>null;
    if (this.products && this.products.constructor === Array) {
      data["Products"] = [];
      for (let item of this.products)
        data["Products"].push(item.toJSON());
    }
    if (this.rFQs && this.rFQs.constructor === Array) {
      data["RFQs"] = [];
      for (let item of this.rFQs)
        data["RFQs"].push(item.toJSON());
    }
    data["Specification"] = this.specification ? this.specification.toJSON() : <any>null;
    return data;
  }

  clone() {
    const json = this.toJSON();
    let result = new Category();
    result.init(json);
    return result;
  }
}

export interface ICategory {
  id: number;
  name?: string | null;
  parentId?: number | null;
  row?: number | null;
  inMyMarkets?: boolean | null;
  icon?: string | null;
  imageUrl?: string | null;
  onHoverIcon?: string | null;
  isLeaf?: boolean | null;
  category1?: Category[] | null;
  category2?: Category | null;
  products?: Product[] | null;
  rFQs?: RFQ[] | null;
  specification?: Specification | null;
}

export class Product implements IProduct {
  id: number;
  name?: string | null;
  categoryId?: number | null;
  shopId?: number | null;
  imageUrl?: string | null;
  imageId?: number | null;
  buy_Sell?: Buy_Sell[] | null;
  category?: Category | null;
  information?: Information | null;
  order?: Order | null;
  shop?: Shop | null;
  values?: Value[] | null;

  constructor(data?: IProduct) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.id = data["Id"] !== undefined ? data["Id"] : <any>null;
      this.name = data["Name"] !== undefined ? data["Name"] : <any>null;
      this.categoryId = data["CategoryId"] !== undefined ? data["CategoryId"] : <any>null;
      this.shopId = data["ShopId"] !== undefined ? data["ShopId"] : <any>null;
      this.imageUrl = data["ImageUrl"] !== undefined ? data["ImageUrl"] : <any>null;
      this.imageId = data["ImageId"] !== undefined ? data["ImageId"] : <any>null;
      if (data["Buy_Sell"] && data["Buy_Sell"].constructor === Array) {
        this.buy_Sell = [];
        for (let item of data["Buy_Sell"])
          this.buy_Sell.push(Buy_Sell.fromJS(item));
      }
      this.category = data["Category"] ? Category.fromJS(data["Category"]) : <any>null;
      this.information = data["Information"] ? Information.fromJS(data["Information"]) : <any>null;
      this.order = data["Order"] ? Order.fromJS(data["Order"]) : <any>null;
      this.shop = data["Shop"] ? Shop.fromJS(data["Shop"]) : <any>null;
      if (data["Values"] && data["Values"].constructor === Array) {
        this.values = [];
        for (let item of data["Values"])
          this.values.push(Value.fromJS(item));
      }
    }
  }

  static fromJS(data: any): Product {
    let result = new Product();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Id"] = this.id !== undefined ? this.id : <any>null;
    data["Name"] = this.name !== undefined ? this.name : <any>null;
    data["CategoryId"] = this.categoryId !== undefined ? this.categoryId : <any>null;
    data["ShopId"] = this.shopId !== undefined ? this.shopId : <any>null;
    data["ImageUrl"] = this.imageUrl !== undefined ? this.imageUrl : <any>null;
    data["ImageId"] = this.imageId !== undefined ? this.imageId : <any>null;
    if (this.buy_Sell && this.buy_Sell.constructor === Array) {
      data["Buy_Sell"] = [];
      for (let item of this.buy_Sell)
        data["Buy_Sell"].push(item.toJSON());
    }
    data["Category"] = this.category ? this.category.toJSON() : <any>null;
    data["Information"] = this.information ? this.information.toJSON() : <any>null;
    data["Order"] = this.order ? this.order.toJSON() : <any>null;
    data["Shop"] = this.shop ? this.shop.toJSON() : <any>null;
    if (this.values && this.values.constructor === Array) {
      data["Values"] = [];
      for (let item of this.values)
        data["Values"].push(item.toJSON());
    }
    return data;
  }

  clone() {
    const json = this.toJSON();
    let result = new Product();
    result.init(json);
    return result;
  }
}

export interface IProduct {
  id: number;
  name?: string | null;
  categoryId?: number | null;
  shopId?: number | null;
  imageUrl?: string | null;
  imageId?: number | null;
  buy_Sell?: Buy_Sell[] | null;
  category?: Category | null;
  information?: Information | null;
  order?: Order | null;
  shop?: Shop | null;
  values?: Value[] | null;
}

export class Buy_Sell implements IBuy_Sell {
  id: number;
  buyerId?: number | null;
  productId?: number | null;
  date?: Date | null;
  buyer?: Buyer | null;
  product?: Product | null;
  payment?: Payment | null;

  constructor(data?: IBuy_Sell) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.id = data["Id"] !== undefined ? data["Id"] : <any>null;
      this.buyerId = data["BuyerId"] !== undefined ? data["BuyerId"] : <any>null;
      this.productId = data["ProductId"] !== undefined ? data["ProductId"] : <any>null;
      this.date = data["date"] ? new Date(data["date"].toString()) : <any>null;
      this.buyer = data["Buyer"] ? Buyer.fromJS(data["Buyer"]) : <any>null;
      this.product = data["Product"] ? Product.fromJS(data["Product"]) : <any>null;
      this.payment = data["Payment"] ? Payment.fromJS(data["Payment"]) : <any>null;
    }
  }

  static fromJS(data: any): Buy_Sell {
    let result = new Buy_Sell();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Id"] = this.id !== undefined ? this.id : <any>null;
    data["BuyerId"] = this.buyerId !== undefined ? this.buyerId : <any>null;
    data["ProductId"] = this.productId !== undefined ? this.productId : <any>null;
    data["date"] = this.date ? this.date.toISOString() : <any>null;
    data["Buyer"] = this.buyer ? this.buyer.toJSON() : <any>null;
    data["Product"] = this.product ? this.product.toJSON() : <any>null;
    data["Payment"] = this.payment ? this.payment.toJSON() : <any>null;
    return data;
  }

  clone() {
    const json = this.toJSON();
    let result = new Buy_Sell();
    result.init(json);
    return result;
  }
}

export interface IBuy_Sell {
  id: number;
  buyerId?: number | null;
  productId?: number | null;
  date?: Date | null;
  buyer?: Buyer | null;
  product?: Product | null;
  payment?: Payment | null;
}

export class Buyer implements IBuyer {
  id: number;
  buy_Sell?: Buy_Sell[] | null;
  customer?: Customer | null;
  chats?: Chat[] | null;
  orders?: Order[] | null;
  rFQs?: RFQ[] | null;

  constructor(data?: IBuyer) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.id = data["Id"] !== undefined ? data["Id"] : <any>null;
      if (data["Buy_Sell"] && data["Buy_Sell"].constructor === Array) {
        this.buy_Sell = [];
        for (let item of data["Buy_Sell"])
          this.buy_Sell.push(Buy_Sell.fromJS(item));
      }
      this.customer = data["Customer"] ? Customer.fromJS(data["Customer"]) : <any>null;
      if (data["Chats"] && data["Chats"].constructor === Array) {
        this.chats = [];
        for (let item of data["Chats"])
          this.chats.push(Chat.fromJS(item));
      }
      if (data["Orders"] && data["Orders"].constructor === Array) {
        this.orders = [];
        for (let item of data["Orders"])
          this.orders.push(Order.fromJS(item));
      }
      if (data["RFQs"] && data["RFQs"].constructor === Array) {
        this.rFQs = [];
        for (let item of data["RFQs"])
          this.rFQs.push(RFQ.fromJS(item));
      }
    }
  }

  static fromJS(data: any): Buyer {
    let result = new Buyer();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Id"] = this.id !== undefined ? this.id : <any>null;
    if (this.buy_Sell && this.buy_Sell.constructor === Array) {
      data["Buy_Sell"] = [];
      for (let item of this.buy_Sell)
        data["Buy_Sell"].push(item.toJSON());
    }
    data["Customer"] = this.customer ? this.customer.toJSON() : <any>null;
    if (this.chats && this.chats.constructor === Array) {
      data["Chats"] = [];
      for (let item of this.chats)
        data["Chats"].push(item.toJSON());
    }
    if (this.orders && this.orders.constructor === Array) {
      data["Orders"] = [];
      for (let item of this.orders)
        data["Orders"].push(item.toJSON());
    }
    if (this.rFQs && this.rFQs.constructor === Array) {
      data["RFQs"] = [];
      for (let item of this.rFQs)
        data["RFQs"].push(item.toJSON());
    }
    return data;
  }

  clone() {
    const json = this.toJSON();
    let result = new Buyer();
    result.init(json);
    return result;
  }
}

export interface IBuyer {
  id: number;
  buy_Sell?: Buy_Sell[] | null;
  customer?: Customer | null;
  chats?: Chat[] | null;
  orders?: Order[] | null;
  rFQs?: RFQ[] | null;
}

export class Customer implements ICustomer {
  id: number;
  name?: number | null;
  email?: string | null;
  buyer?: Buyer | null;
  seller?: Seller | null;

  constructor(data?: ICustomer) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.id = data["Id"] !== undefined ? data["Id"] : <any>null;
      this.name = data["Name"] !== undefined ? data["Name"] : <any>null;
      this.email = data["Email"] !== undefined ? data["Email"] : <any>null;
      this.buyer = data["Buyer"] ? Buyer.fromJS(data["Buyer"]) : <any>null;
      this.seller = data["Seller"] ? Seller.fromJS(data["Seller"]) : <any>null;
    }
  }

  static fromJS(data: any): Customer {
    let result = new Customer();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Id"] = this.id !== undefined ? this.id : <any>null;
    data["Name"] = this.name !== undefined ? this.name : <any>null;
    data["Email"] = this.email !== undefined ? this.email : <any>null;
    data["Buyer"] = this.buyer ? this.buyer.toJSON() : <any>null;
    data["Seller"] = this.seller ? this.seller.toJSON() : <any>null;
    return data;
  }

  clone() {
    const json = this.toJSON();
    let result = new Customer();
    result.init(json);
    return result;
  }
}

export interface ICustomer {
  id: number;
  name?: number | null;
  email?: string | null;
  buyer?: Buyer | null;
  seller?: Seller | null;
}

export class Seller implements ISeller {
  id: number;
  type?: number | null;
  chats?: Chat[] | null;
  customer?: Customer | null;
  orders?: Order[] | null;
  shop?: Shop | null;

  constructor(data?: ISeller) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.id = data["Id"] !== undefined ? data["Id"] : <any>null;
      this.type = data["Type"] !== undefined ? data["Type"] : <any>null;
      if (data["Chats"] && data["Chats"].constructor === Array) {
        this.chats = [];
        for (let item of data["Chats"])
          this.chats.push(Chat.fromJS(item));
      }
      this.customer = data["Customer"] ? Customer.fromJS(data["Customer"]) : <any>null;
      if (data["Orders"] && data["Orders"].constructor === Array) {
        this.orders = [];
        for (let item of data["Orders"])
          this.orders.push(Order.fromJS(item));
      }
      this.shop = data["Shop"] ? Shop.fromJS(data["Shop"]) : <any>null;
    }
  }

  static fromJS(data: any): Seller {
    let result = new Seller();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Id"] = this.id !== undefined ? this.id : <any>null;
    data["Type"] = this.type !== undefined ? this.type : <any>null;
    if (this.chats && this.chats.constructor === Array) {
      data["Chats"] = [];
      for (let item of this.chats)
        data["Chats"].push(item.toJSON());
    }
    data["Customer"] = this.customer ? this.customer.toJSON() : <any>null;
    if (this.orders && this.orders.constructor === Array) {
      data["Orders"] = [];
      for (let item of this.orders)
        data["Orders"].push(item.toJSON());
    }
    data["Shop"] = this.shop ? this.shop.toJSON() : <any>null;
    return data;
  }

  clone() {
    const json = this.toJSON();
    let result = new Seller();
    result.init(json);
    return result;
  }
}

export interface ISeller {
  id: number;
  type?: number | null;
  chats?: Chat[] | null;
  customer?: Customer | null;
  orders?: Order[] | null;
  shop?: Shop | null;
}

export class Chat implements IChat {
  id: number;
  buyerId?: number | null;
  sellerId?: number | null;
  orderId?: number | null;
  buyer?: Buyer | null;
  order?: Order | null;
  seller?: Seller | null;

  constructor(data?: IChat) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.id = data["Id"] !== undefined ? data["Id"] : <any>null;
      this.buyerId = data["BuyerId"] !== undefined ? data["BuyerId"] : <any>null;
      this.sellerId = data["SellerId"] !== undefined ? data["SellerId"] : <any>null;
      this.orderId = data["OrderId"] !== undefined ? data["OrderId"] : <any>null;
      this.buyer = data["Buyer"] ? Buyer.fromJS(data["Buyer"]) : <any>null;
      this.order = data["Order"] ? Order.fromJS(data["Order"]) : <any>null;
      this.seller = data["Seller"] ? Seller.fromJS(data["Seller"]) : <any>null;
    }
  }

  static fromJS(data: any): Chat {
    let result = new Chat();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Id"] = this.id !== undefined ? this.id : <any>null;
    data["BuyerId"] = this.buyerId !== undefined ? this.buyerId : <any>null;
    data["SellerId"] = this.sellerId !== undefined ? this.sellerId : <any>null;
    data["OrderId"] = this.orderId !== undefined ? this.orderId : <any>null;
    data["Buyer"] = this.buyer ? this.buyer.toJSON() : <any>null;
    data["Order"] = this.order ? this.order.toJSON() : <any>null;
    data["Seller"] = this.seller ? this.seller.toJSON() : <any>null;
    return data;
  }

  clone() {
    const json = this.toJSON();
    let result = new Chat();
    result.init(json);
    return result;
  }
}

export interface IChat {
  id: number;
  buyerId?: number | null;
  sellerId?: number | null;
  orderId?: number | null;
  buyer?: Buyer | null;
  order?: Order | null;
  seller?: Seller | null;
}

export class Order implements IOrder {
  id: number;
  date?: Date | null;
  buyerId?: number | null;
  sellerId?: number | null;
  buyer?: Buyer | null;
  chats?: Chat[] | null;
  product?: Product | null;
  seller?: Seller | null;
  payment?: Payment | null;

  constructor(data?: IOrder) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.id = data["Id"] !== undefined ? data["Id"] : <any>null;
      this.date = data["date"] ? new Date(data["date"].toString()) : <any>null;
      this.buyerId = data["BuyerId"] !== undefined ? data["BuyerId"] : <any>null;
      this.sellerId = data["SellerId"] !== undefined ? data["SellerId"] : <any>null;
      this.buyer = data["Buyer"] ? Buyer.fromJS(data["Buyer"]) : <any>null;
      if (data["Chats"] && data["Chats"].constructor === Array) {
        this.chats = [];
        for (let item of data["Chats"])
          this.chats.push(Chat.fromJS(item));
      }
      this.product = data["Product"] ? Product.fromJS(data["Product"]) : <any>null;
      this.seller = data["Seller"] ? Seller.fromJS(data["Seller"]) : <any>null;
      this.payment = data["Payment"] ? Payment.fromJS(data["Payment"]) : <any>null;
    }
  }

  static fromJS(data: any): Order {
    let result = new Order();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Id"] = this.id !== undefined ? this.id : <any>null;
    data["date"] = this.date ? this.date.toISOString() : <any>null;
    data["BuyerId"] = this.buyerId !== undefined ? this.buyerId : <any>null;
    data["SellerId"] = this.sellerId !== undefined ? this.sellerId : <any>null;
    data["Buyer"] = this.buyer ? this.buyer.toJSON() : <any>null;
    if (this.chats && this.chats.constructor === Array) {
      data["Chats"] = [];
      for (let item of this.chats)
        data["Chats"].push(item.toJSON());
    }
    data["Product"] = this.product ? this.product.toJSON() : <any>null;
    data["Seller"] = this.seller ? this.seller.toJSON() : <any>null;
    data["Payment"] = this.payment ? this.payment.toJSON() : <any>null;
    return data;
  }

  clone() {
    const json = this.toJSON();
    let result = new Order();
    result.init(json);
    return result;
  }
}

export interface IOrder {
  id: number;
  date?: Date | null;
  buyerId?: number | null;
  sellerId?: number | null;
  buyer?: Buyer | null;
  chats?: Chat[] | null;
  product?: Product | null;
  seller?: Seller | null;
  payment?: Payment | null;
}

export class Payment implements IPayment {
  id: number;
  date?: Date | null;
  cost?: number | null;
  buy_Sell?: Buy_Sell | null;
  order?: Order | null;

  constructor(data?: IPayment) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.id = data["Id"] !== undefined ? data["Id"] : <any>null;
      this.date = data["date"] ? new Date(data["date"].toString()) : <any>null;
      this.cost = data["cost"] !== undefined ? data["cost"] : <any>null;
      this.buy_Sell = data["Buy_Sell"] ? Buy_Sell.fromJS(data["Buy_Sell"]) : <any>null;
      this.order = data["Order"] ? Order.fromJS(data["Order"]) : <any>null;
    }
  }

  static fromJS(data: any): Payment {
    let result = new Payment();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Id"] = this.id !== undefined ? this.id : <any>null;
    data["date"] = this.date ? this.date.toISOString() : <any>null;
    data["cost"] = this.cost !== undefined ? this.cost : <any>null;
    data["Buy_Sell"] = this.buy_Sell ? this.buy_Sell.toJSON() : <any>null;
    data["Order"] = this.order ? this.order.toJSON() : <any>null;
    return data;
  }

  clone() {
    const json = this.toJSON();
    let result = new Payment();
    result.init(json);
    return result;
  }
}

export interface IPayment {
  id: number;
  date?: Date | null;
  cost?: number | null;
  buy_Sell?: Buy_Sell | null;
  order?: Order | null;
}

export class Shop implements IShop {
  id: number;
  products?: Product[] | null;
  seller?: Seller | null;

  constructor(data?: IShop) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.id = data["Id"] !== undefined ? data["Id"] : <any>null;
      if (data["Products"] && data["Products"].constructor === Array) {
        this.products = [];
        for (let item of data["Products"])
          this.products.push(Product.fromJS(item));
      }
      this.seller = data["Seller"] ? Seller.fromJS(data["Seller"]) : <any>null;
    }
  }

  static fromJS(data: any): Shop {
    let result = new Shop();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Id"] = this.id !== undefined ? this.id : <any>null;
    if (this.products && this.products.constructor === Array) {
      data["Products"] = [];
      for (let item of this.products)
        data["Products"].push(item.toJSON());
    }
    data["Seller"] = this.seller ? this.seller.toJSON() : <any>null;
    return data;
  }

  clone() {
    const json = this.toJSON();
    let result = new Shop();
    result.init(json);
    return result;
  }
}

export interface IShop {
  id: number;
  products?: Product[] | null;
  seller?: Seller | null;
}

export class RFQ implements IRFQ {
  id: number;
  status?: number | null;
  categoryId?: number | null;
  buyerId?: number | null;
  extraQoutes?: boolean | null;
  urgentRequest?: boolean | null;
  unit?: number | null;
  description?: string | null;
  pices?: number | null;
  preferedUnitPrice?: number | null;
  shippingMethod?: number | null;
  unitPrice?: number | null;
  destinationPort?: string | null;
  insurance?: number | null;
  attaches?: Attach[] | null;
  buyer?: Buyer | null;
  category?: Category | null;
  images?: Image[] | null;

  constructor(data?: IRFQ) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.id = data["Id"] !== undefined ? data["Id"] : <any>null;
      this.status = data["Status"] !== undefined ? data["Status"] : <any>null;
      this.categoryId = data["CategoryId"] !== undefined ? data["CategoryId"] : <any>null;
      this.buyerId = data["BuyerId"] !== undefined ? data["BuyerId"] : <any>null;
      this.extraQoutes = data["ExtraQoutes"] !== undefined ? data["ExtraQoutes"] : <any>null;
      this.urgentRequest = data["UrgentRequest"] !== undefined ? data["UrgentRequest"] : <any>null;
      this.unit = data["Unit"] !== undefined ? data["Unit"] : <any>null;
      this.description = data["Description"] !== undefined ? data["Description"] : <any>null;
      this.pices = data["Pices"] !== undefined ? data["Pices"] : <any>null;
      this.preferedUnitPrice = data["PreferedUnitPrice"] !== undefined ? data["PreferedUnitPrice"] : <any>null;
      this.shippingMethod = data["ShippingMethod"] !== undefined ? data["ShippingMethod"] : <any>null;
      this.unitPrice = data["UnitPrice"] !== undefined ? data["UnitPrice"] : <any>null;
      this.destinationPort = data["DestinationPort"] !== undefined ? data["DestinationPort"] : <any>null;
      this.insurance = data["Insurance"] !== undefined ? data["Insurance"] : <any>null;
      if (data["Attaches"] && data["Attaches"].constructor === Array) {
        this.attaches = [];
        for (let item of data["Attaches"])
          this.attaches.push(Attach.fromJS(item));
      }
      this.buyer = data["Buyer"] ? Buyer.fromJS(data["Buyer"]) : <any>null;
      this.category = data["Category"] ? Category.fromJS(data["Category"]) : <any>null;
      if (data["Images"] && data["Images"].constructor === Array) {
        this.images = [];
        for (let item of data["Images"])
          this.images.push(Image.fromJS(item));
      }
    }
  }

  static fromJS(data: any): RFQ {
    let result = new RFQ();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Id"] = this.id !== undefined ? this.id : <any>null;
    data["Status"] = this.status !== undefined ? this.status : <any>null;
    data["CategoryId"] = this.categoryId !== undefined ? this.categoryId : <any>null;
    data["BuyerId"] = this.buyerId !== undefined ? this.buyerId : <any>null;
    data["ExtraQoutes"] = this.extraQoutes !== undefined ? this.extraQoutes : <any>null;
    data["UrgentRequest"] = this.urgentRequest !== undefined ? this.urgentRequest : <any>null;
    data["Unit"] = this.unit !== undefined ? this.unit : <any>null;
    data["Description"] = this.description !== undefined ? this.description : <any>null;
    data["Pices"] = this.pices !== undefined ? this.pices : <any>null;
    data["PreferedUnitPrice"] = this.preferedUnitPrice !== undefined ? this.preferedUnitPrice : <any>null;
    data["ShippingMethod"] = this.shippingMethod !== undefined ? this.shippingMethod : <any>null;
    data["UnitPrice"] = this.unitPrice !== undefined ? this.unitPrice : <any>null;
    data["DestinationPort"] = this.destinationPort !== undefined ? this.destinationPort : <any>null;
    data["Insurance"] = this.insurance !== undefined ? this.insurance : <any>null;
    if (this.attaches && this.attaches.constructor === Array) {
      data["Attaches"] = [];
      for (let item of this.attaches)
        data["Attaches"].push(item.toJSON());
    }
    data["Buyer"] = this.buyer ? this.buyer.toJSON() : <any>null;
    data["Category"] = this.category ? this.category.toJSON() : <any>null;
    if (this.images && this.images.constructor === Array) {
      data["Images"] = [];
      for (let item of this.images)
        data["Images"].push(item.toJSON());
    }
    return data;
  }

  clone() {
    const json = this.toJSON();
    let result = new RFQ();
    result.init(json);
    return result;
  }
}

export interface IRFQ {
  id: number;
  status?: number | null;
  categoryId?: number | null;
  buyerId?: number | null;
  extraQoutes?: boolean | null;
  urgentRequest?: boolean | null;
  unit?: number | null;
  description?: string | null;
  pices?: number | null;
  preferedUnitPrice?: number | null;
  shippingMethod?: number | null;
  unitPrice?: number | null;
  destinationPort?: string | null;
  insurance?: number | null;
  attaches?: Attach[] | null;
  buyer?: Buyer | null;
  category?: Category | null;
  images?: Image[] | null;
}

export class Attach implements IAttach {
  id: number;
  url?: string | null;
  type?: number | null;
  informationId?: number | null;
  rFQId?: number | null;
  information?: Information | null;
  rFQ?: RFQ | null;

  constructor(data?: IAttach) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.id = data["Id"] !== undefined ? data["Id"] : <any>null;
      this.url = data["Url"] !== undefined ? data["Url"] : <any>null;
      this.type = data["Type"] !== undefined ? data["Type"] : <any>null;
      this.informationId = data["InformationId"] !== undefined ? data["InformationId"] : <any>null;
      this.rFQId = data["RFQId"] !== undefined ? data["RFQId"] : <any>null;
      this.information = data["Information"] ? Information.fromJS(data["Information"]) : <any>null;
      this.rFQ = data["RFQ"] ? RFQ.fromJS(data["RFQ"]) : <any>null;
    }
  }

  static fromJS(data: any): Attach {
    let result = new Attach();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Id"] = this.id !== undefined ? this.id : <any>null;
    data["Url"] = this.url !== undefined ? this.url : <any>null;
    data["Type"] = this.type !== undefined ? this.type : <any>null;
    data["InformationId"] = this.informationId !== undefined ? this.informationId : <any>null;
    data["RFQId"] = this.rFQId !== undefined ? this.rFQId : <any>null;
    data["Information"] = this.information ? this.information.toJSON() : <any>null;
    data["RFQ"] = this.rFQ ? this.rFQ.toJSON() : <any>null;
    return data;
  }

  clone() {
    const json = this.toJSON();
    let result = new Attach();
    result.init(json);
    return result;
  }
}

export interface IAttach {
  id: number;
  url?: string | null;
  type?: number | null;
  informationId?: number | null;
  rFQId?: number | null;
  information?: Information | null;
  rFQ?: RFQ | null;
}

export class Information implements IInformation {
  id: number;
  attaches?: Attach[] | null;
  product?: Product | null;

  constructor(data?: IInformation) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.id = data["Id"] !== undefined ? data["Id"] : <any>null;
      if (data["Attaches"] && data["Attaches"].constructor === Array) {
        this.attaches = [];
        for (let item of data["Attaches"])
          this.attaches.push(Attach.fromJS(item));
      }
      this.product = data["Product"] ? Product.fromJS(data["Product"]) : <any>null;
    }
  }

  static fromJS(data: any): Information {
    let result = new Information();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Id"] = this.id !== undefined ? this.id : <any>null;
    if (this.attaches && this.attaches.constructor === Array) {
      data["Attaches"] = [];
      for (let item of this.attaches)
        data["Attaches"].push(item.toJSON());
    }
    data["Product"] = this.product ? this.product.toJSON() : <any>null;
    return data;
  }

  clone() {
    const json = this.toJSON();
    let result = new Information();
    result.init(json);
    return result;
  }
}

export interface IInformation {
  id: number;
  attaches?: Attach[] | null;
  product?: Product | null;
}

export class Image implements IImage {
  id: number;
  url?: string | null;
  rFQId?: number | null;
  rFQ?: RFQ | null;

  constructor(data?: IImage) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.id = data["Id"] !== undefined ? data["Id"] : <any>null;
      this.url = data["Url"] !== undefined ? data["Url"] : <any>null;
      this.rFQId = data["RFQId"] !== undefined ? data["RFQId"] : <any>null;
      this.rFQ = data["RFQ"] ? RFQ.fromJS(data["RFQ"]) : <any>null;
    }
  }

  static fromJS(data: any): Image {
    let result = new Image();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Id"] = this.id !== undefined ? this.id : <any>null;
    data["Url"] = this.url !== undefined ? this.url : <any>null;
    data["RFQId"] = this.rFQId !== undefined ? this.rFQId : <any>null;
    data["RFQ"] = this.rFQ ? this.rFQ.toJSON() : <any>null;
    return data;
  }

  clone() {
    const json = this.toJSON();
    let result = new Image();
    result.init(json);
    return result;
  }
}

export interface IImage {
  id: number;
  url?: string | null;
  rFQId?: number | null;
  rFQ?: RFQ | null;
}

export class Value implements IValue {
  id: number;
  productId?: number | null;
  possibleValue?: PossibleValue | null;
  product?: Product | null;

  constructor(data?: IValue) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.id = data["Id"] !== undefined ? data["Id"] : <any>null;
      this.productId = data["ProductId"] !== undefined ? data["ProductId"] : <any>null;
      this.possibleValue = data["PossibleValue"] ? PossibleValue.fromJS(data["PossibleValue"]) : <any>null;
      this.product = data["Product"] ? Product.fromJS(data["Product"]) : <any>null;
    }
  }

  static fromJS(data: any): Value {
    let result = new Value();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Id"] = this.id !== undefined ? this.id : <any>null;
    data["ProductId"] = this.productId !== undefined ? this.productId : <any>null;
    data["PossibleValue"] = this.possibleValue ? this.possibleValue.toJSON() : <any>null;
    data["Product"] = this.product ? this.product.toJSON() : <any>null;
    return data;
  }

  clone() {
    const json = this.toJSON();
    let result = new Value();
    result.init(json);
    return result;
  }
}

export interface IValue {
  id: number;
  productId?: number | null;
  possibleValue?: PossibleValue | null;
  product?: Product | null;
}

export class PossibleValue implements IPossibleValue {
  id: number;
  value?: string | null;
  specificationId?: number | null;
  specification?: Specification | null;
  value1?: Value | null;

  constructor(data?: IPossibleValue) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.id = data["id"] !== undefined ? data["id"] : <any>null;
      this.value = data["Value"] !== undefined ? data["Value"] : <any>null;
      this.specificationId = data["SpecificationId"] !== undefined ? data["SpecificationId"] : <any>null;
      this.specification = data["Specification"] ? Specification.fromJS(data["Specification"]) : <any>null;
      this.value1 = data["Value1"] ? Value.fromJS(data["Value1"]) : <any>null;
    }
  }

  static fromJS(data: any): PossibleValue {
    let result = new PossibleValue();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id !== undefined ? this.id : <any>null;
    data["Value"] = this.value !== undefined ? this.value : <any>null;
    data["SpecificationId"] = this.specificationId !== undefined ? this.specificationId : <any>null;
    data["Specification"] = this.specification ? this.specification.toJSON() : <any>null;
    data["Value1"] = this.value1 ? this.value1.toJSON() : <any>null;
    return data;
  }

  clone() {
    const json = this.toJSON();
    let result = new PossibleValue();
    result.init(json);
    return result;
  }
}

export interface IPossibleValue {
  id: number;
  value?: string | null;
  specificationId?: number | null;
  specification?: Specification | null;
  value1?: Value | null;
}

export class Specification implements ISpecification {
  id: number;
  name?: string | null;
  type?: number | null;
  status?: number | null;
  category?: Category | null;
  possibleValues?: PossibleValue[] | null;

  constructor(data?: ISpecification) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.id = data["Id"] !== undefined ? data["Id"] : <any>null;
      this.name = data["Name"] !== undefined ? data["Name"] : <any>null;
      this.type = data["Type"] !== undefined ? data["Type"] : <any>null;
      this.status = data["Status"] !== undefined ? data["Status"] : <any>null;
      this.category = data["Category"] ? Category.fromJS(data["Category"]) : <any>null;
      if (data["PossibleValues"] && data["PossibleValues"].constructor === Array) {
        this.possibleValues = [];
        for (let item of data["PossibleValues"])
          this.possibleValues.push(PossibleValue.fromJS(item));
      }
    }
  }

  static fromJS(data: any): Specification {
    let result = new Specification();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Id"] = this.id !== undefined ? this.id : <any>null;
    data["Name"] = this.name !== undefined ? this.name : <any>null;
    data["Type"] = this.type !== undefined ? this.type : <any>null;
    data["Status"] = this.status !== undefined ? this.status : <any>null;
    data["Category"] = this.category ? this.category.toJSON() : <any>null;
    if (this.possibleValues && this.possibleValues.constructor === Array) {
      data["PossibleValues"] = [];
      for (let item of this.possibleValues)
        data["PossibleValues"].push(item.toJSON());
    }
    return data;
  }

  clone() {
    const json = this.toJSON();
    let result = new Specification();
    result.init(json);
    return result;
  }
}

export interface ISpecification {
  id: number;
  name?: string | null;
  type?: number | null;
  status?: number | null;
  category?: Category | null;
  possibleValues?: PossibleValue[] | null;
}

export class SwaggerException extends Error {
  message: string;
  status: number;
  response: string;
  result: any;

  constructor(message: string, status: number, response: string, result: any) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.result = result;
  }
}

function throwException(message: string, status: number, response: string, result?: any): Observable<any> {
  if (result !== null && result !== undefined)
    return Observable.throw(result);
  else
    return Observable.throw(new SwaggerException(message, status, response, null));
}

function blobToText(blob: Blob): Observable<string> {
  return new Observable<string>((observer: any) => {
    let reader = new FileReader();
    reader.onload = function () {
      observer.next(this.result);
      observer.complete();
    }
    reader.readAsText(blob);
  });
}
